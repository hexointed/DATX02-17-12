Introduktion: 

	Jag heter Jesper Åberg, det där är Björn. Vårt arbete handlar om att
	undersöka optimeringsmöjligheterna, och därigenom prestandan, för en
	grafikrenderingsmetod som heter Ray-Marching. Detta i jämförelse med
	prestandan opch optimeringsmöjligheterna för polygonbaserad rendering, som
	är standarden inom realtidsgrafik idag.

Beskrivning Ray-Marching:

	Ray-Marching-algoritmen baseras på att geometrin modellerats med en
	distansfunktion, det vill säga en funktion som mappar varje punkt i rummet
	till dess avstånd från geometrin. Till exempel skulle en sfär i origo
	beskrivas som `f(x,y,z) = sqrt(x^2 + y^2 + z^2) - r` vilket altså är
	avståndet från origo minus radien. Denna beskrivning av sfären är
	matematiskt perfekt (så långt som precisionen tillåter). Det är dock
	förstås inte enkelt att beskriva alla tänkbara objekt exakt med en
	distansfunktion, men detta ger nya intressanta avvägningar vid
	objektdesign. En till intressant aspekt med en distansfunktion som modell
	är möjligheterna till att använda `Constructive Solid Geometry`, det vill
	säga att man modellerar med mängdoperatorer som union och snitt, och detta
	till en låg kostnad. Om man inte kräver perfekta distansfunktioner är
	det också möjligt att lägga till effekter som sinusdeformationer till
	objekt.
	
	(SLIDE RAY-MARCHING)
	
	(BILD TRIANGLAR) Detta är intressant att undersöka eftersom sättet man
	renderar realtidsgrafik på idag har vissa brister som saknas helt i
	raymarching. Eftersom man bygger upp världen av trianglar i traditionell
	grafik så blir alla former en aproximation. Det tydligaste exemplet är en
	sfär där alla rundade ytor är aproximationer eftersom det inte går att
	skapa runda ytor av platta trianglar. 
	
	Utöver problemen med kurvade ytor så är reflektioner så tungt att det
	oftast löses genom att vara väldigt lågupplöst eller fejkas; men resultatet
	blir sällan bra. Med raymarching är det inte tyngre att simulera äkta,
	realistiska reflektioner och refraktioner än det är att rendera vilken
	geometri som helst.
	
	Så, en del problem som realtidsgrafik står inför idag går att enkelt lösa
	genom att använda raymarching istället, men det är inte perfekt eller
	problemfritt.  Med polygoner har man fördelen att invecklade objekt inte är
	tyngre att rita än simpla objekt med samma antal polygoner samt att
	polygoner är väldigt lätta att använda som byggstenar för komplicerade
	objekt genom att sätta ihop många av dem. Med raymarching är det
	svårare att rita ut trianglar men lätt att rita till exempel sfärer och
	kuber. 
	
	(SHADER FRAKTAL) Med raymarching går det även att göra repeterande terräng
	som sträcker sig oändligt långt bort och det kräver inte så mycket för att
	rendera 3D-fraktaler i realtid. 

Projektets mål: 

	Projektets mål är altså att skapa en hårdvaruaccelererad GPU-arkitektur
	optimerad för Ray-Marching för att undersöka hur skalbar denna algoritm är,
	både i jämförelse med polygonbaserad rendering, och med en naiv
	implementation av arkitekturen.

Projektplanering: 

	(BILD PÅ SCHEMA) Här ser ni de planerade arbetsfaserna från
	planeringsstadiet fram till slutrapporten och opponeringen på den. (GÅ
	IGENOM SCHEMA)
	
	Vi började med att studera hur raymarching-algoritmen fungerar och skapade
	flera olika egna implementationer av den, som fragment shaders på vanliga
	grafikkort. Vid det här laget har vi skapat några egna shaders, här är
	några av dem. 
	
	Vi ska nu börja skriva en GPU-kärna i ett hårdvarubeskrivande språk; vi har
	börjat med att använda clash. När vi har en kärna kan vi designa en scen
	och använda den för att kunna mäta vår kärnas prestation jämfört med hur
	snabbt det går på traditionella grafikkort och även för att kunna resonera
	kring prestandaökningar när vi implementerar optimeringar och skriver nya
	versioner av kärnan.  
	
	Vi ska sedan iterativt implementera, simulera och evaluera olika
	optimeringar för att nå så hög prestanda som möjligt. Vilka optimeringar vi
	väljer att kolla på måste nödvändigtvis bestämmas under projektets gång,
	men hittils har vi funderat på olika typer av parallellism som är
	kompatibla med algoritmen, samt att se över om vi kan förbättra
	minneshanteringen på något sätt.
	
	I slutändan kommer vår produkt inte vara i närheten så snabb som när vi kör
	det på en av till exempel NVIDIAS GPU:er men tanken är att vi ska kunna
	extrapolera vårt resultat till en teoretiskt nåbar prestanda. 

Statusrapport: 
	
	Så, lite om vad vi har jobbat med hittils:

	(SHADERS, EV. REALTIDSRENDERADE EXEMPEL) Vi är klara med att läsa in oss på
	hur Ray-Marching fungerar och skriva våra egna versioner av algoritmen. Nu
	har vi börjat med att skriva en processorkärna som är byggd för
	Ray-Marching-algoritmen. Sedan måste vi bygga allt som behövs runt själva
	kärnan för att den ska fungera. 

Egna erfarenheter: 

	Hittils har det varit lätt att hålla oss synkroniserade med schemat, vi
	ligger vart vi vill vara tidsmässigt och det känns inte som att vi är på väg
	att halka efter. I början var det svårt att balansera kandidatarbetet med
	andra kurser. Innan man kände gruppen som man skulle jobba med så var det
	svårt att kommunicera bra och effektivt men nu har vi väldigt bra
	gruppdynamik, men hittils har vi främst haft studier på ämnet så det har
	inte krävts jättemycket sammarbete eller kommunikation så det finns en risk
	att det blir svårare sen. 
