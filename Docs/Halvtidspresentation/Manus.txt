
Introduktion: Jag är Jesper Åberg, det där är Björn. Vårt arbete går ut på att
ta reda på om det hade varit en bättre ide att rendera realtidsgrafik med en
metod som heter raymarching istället för polygonbaserad grafik, som är
standarden inom spel idag.

Projektets mål: Skapa en hårdvaruaccelererad raymarcher för att undersöka om
raymarching är lika skalbart som polygonbaserad grafik är i längden. 


Detta är en intressant att undersöka eftersom sättet man renderar
realtidsgrafik på idag har vissa stora brister som saknas helt i raymarching.
Eftersom man bygger upp världen av trianglar (BILD) så blir alla former en
aproximation. Det tydligaste exemplet är en sfär men alla rundade ytor är
aproximationer eftersom det inte går att skapa runda ytor av platta trianglar. 



När man använder sig av raymarching så bygger man upp sin värld genom att
matematiskt beskriva volymer. Till exempel så beskriver man en sfär genom att
säga "allt som är mindre än avstånd x från den här punkten tillhör den här
sfären". Eftersom man beskriver objekt på det sättet blir de matematiskt
perfekta, oavsett hur nära man tittar på en sfär kommer den alltid se ut som en
sfär. En till fördel med att beskriva objekt på det sättet är att man
matematiskt kan deformera dem, till exempel kan man få objekt att smälta
samman, man kan "urholka" ett objekt med ett annat objekt eller få det att få
sinusvågor längs ytan.


Utöver problemen med kurvade ytor så är reflektioner så tungt att det oftast
löses genom att vara väldigt lågupplöst eller fejkas men resultatet blir sällan
bra. Med raymarching är det inte tungt att simulera äkta,realistiska
reflektioner och refraktioner.

Så, en del problem som realtidsgrafik står inför idag går att enkelt lösa genom
att använda raymarching istället, men det är inte perfekt eller problemfritt.
Med polygoner har man fördelen att invecklade objekt inte är tyngre att rita än
simpla objekt med samma antal polygoner samt att polygoner är väldigt lätt att
bygga komplicerade objekt med genom att sätta ihop många av dem. Med
raymarching är det svårt att rita ut trianglar men lätt att rita till exempel
sfärer och kuber, det leder till att mer avancerade objekt kan man inte bygga
upp av något så smidigt som trianglar utan istället får man använda sfärer,
kuber och andra objekt som lätt går att beskriva matematiskt.

Med raymarching går det även att göra repeterande terräng som sträcker sig
oändligt långt bort och det kräver inte så mycket för att rendera 3D fraktaler
i realtid (VISA). 



Projektplanering: (BILD PÅ SCHEMA) Vi började med att läsa in oss på hur
raymarching fungerar och skapa vår egna version av det. Genom att använda
grafikkort som egentligen är byggda för att rendera polygonbaserad grafik kan
man hårdvaruaccelera renderingen. Vid det här laget har vi skapat några egna
shaders (FÖRBÄTTRA MENING) (BILD), här är några av dem. 

Vi ska nu börja skriva en kärna i ett hårdvarubeskrivande språk, vi tänker
använda clash. När vi har en kärna kan vi skriva en referens-shader att använda
så att vi kan mäta vår kärnas prestation jämfört med hur snabbt det går på våra
grafikkort och även se tydlig prestandaökning när vi implementerar optimeringar
och skriver nya versioner av kärnan. Sedan ska vi implementera parallellism och
se över om vi kan förbättra minneshanteringen på något sätt. 

Vi ska sedan iterativt implementera, simulera och evaluera olika optimeringar
för att nå så hög prestanda vi kan. 

I slutändan kommer vår produkt inte vara i närheten så snabb som när vi kör det
på en av till exempel NVIDIAS GPU:er men tanken är att vi ska extrapolera vårt
resultat till en teoretiskt nåbar prestanda. 
	

Statusrapport: Vi är precis klara med att läsa in oss på hur raymarching
fungerar och skriva våra egna versioner av algoritmen. (BILDER, EV.
realtidsrenderade exempel) Nu börjar vi skriva en processorkärna som är byggd
för att raymarcha i hårdvarubeskrivande språk, vi tänker använda clash. Sedan
måste vi bygga allt som behövs runt själva kärnan för att den ska fungera.
Hittils har vi följt schemat och inte glidit efter. 




Egna erfarenheter: Hittils har det varit lätt att hålla oss synkroniserade med
schemat, vi ligger vart vi vill vara tidsvis och det känns inte som att vi är
på väg att halka efter. I början var det svårt att balansera kandidatarbetet
med andra kurser. Innan man kände gruppen som jag skulle jobba med så var det
svårt att kommunicera br aoch effektivt men nu har vi väldigt bra gruppdynamik,
men hittils har vi främst haft studier på ämnet så det har inte krävts
jättemycket samarbete eller kommunikation så det finns en risk att det blir
svårare sen. 



(NOTES) få in att vi vill simulera det för att om vi gjorde en raymarching
fokuserad gpu skulle det gå ännu snabbare än på dagens grafikkort
