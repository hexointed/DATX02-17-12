hur man simulerar:
ladda assembler
asm "filnamn"
ladda simulate
simGPU

setval a b - c         
värde 'a' är på minnet, värde 'b' är plats på stacken. operationen skriver till minnet. påverkar inte stacken.

pushq - c
pushar hela tråden till kön

pushf - c
pushar hela skiten till framebuffer, register 1 är pekare till vilken pixel, register 2 innehåller pixelfärg (8 bitar per kanal, sista 8 används ej)

drop - c
dumpar hela tråden

pack 
läser från minnet (registren) och pushar till stack
zaccum 
hämtar next's resultat

next 
används för att göra distansfunktioner

val 
laddar in pekaren till värdet

div
den övre delat på den undre (i stacken, alltså den först pushade delat på den senast pushade)

sub
den övre minus den undre (i stacken, den först pushade minus den sist pushade)

addv
adderar två vektorer samman

subv
subtraherar den övre vektorn från den undre

scale
gångrar den undre floaten med vektorn över
val 1
val 1
val 1
val 3 
scale -> (1,1,1)*3

copy
tar ett värde och lägger 2 sådana på stacken

 
dot
tar två vektorer och ger en siffra

cross
tar kryss produkten av två vektorer
(5,6,7)x(1,2,4) = (10,-13,4) "(x,y,z)"
val 5
val 6
val 7
val 1
val 2
val 4
cross -> 4
	-13
	 10

norm
normaliserar en vektor till längden ett med samma riktning




-- metoder

length - inte testad

distBall - inte testad

rayLength - inte testad

normalize - inte testad - överflödig

camSetup - inte överflödig - kan bli bättre mha addv




-- förhoppningsvis inkommande operationer

pow (låg prioritet)

"less than/more than (< / >)" (returnerar 1 om det är mindre än, annars returnerar)


Important registers
register 0         instr-pekare
register 1         pixelpekare
register 2         (pixelfärg) x-värde för pixel
register 3         y-värde för pixel

How Registers are used in code
register 4-6       ray-direction 
register 7         raylängd 
register 8-10      temp vec
register 11-13     temp vec 2



i register sparas vektorer stigande, till exempel 
reg. 4 5 6
vec. x y z

i stacken ligger vektorn stigande, x pushas alltså först till stacken, y sista